@page "/inflow"
@using BudgetBhasan.Models
@using BudgetBhasan.Services


@inject Database DatabaseService
@inject NavigationManager Navigation

<link href="css/Inflow.css" rel="stylesheet" />

<div class="account-credit-container">
<h2>Account Credit</h2>
<div class="summary-cards">
    <div class="card">
        <h3>Current Balance</h3>
        <p>@prefferedCurrency @currentBalance</p>
    </div>
    <div class="card">
        <h3>Total Transactions</h3>
        <p>@totalTransactions</p>
    </div>
    <div class="card">
        <h3>Your Income</h3>
        <p>@prefferedCurrency @totalIncome</p>
        <button @onclick="NavigateToAddMoney">Add Balance</button>
    </div>
</div>

<h3>Inflow Transactions</h3>
    <div class="search-container">
        <input type="text" placeholder="Search by Transaction Title" @bind="searchQuery" />
        <button @onclick="SearchTransactions">Search</button>
    </div>
<table class="transaction-table">
    <thead>
    <tr>
        <th>Transaction Title</th>
        <th>
            Date
            <button @onclick="SortByDateAsc">↑</button>
            <button @onclick="SortByDateDesc">↓</button>
        </th>
        <th>
            Amount
            <button @onclick="SortByAmountAsc">↑</button>
            <button @onclick="SortByAmountDesc">↓</button>
        </th>
        <th>Label</th>
        <th>Note</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var inflow in filteredInflows)
    {
        <tr>
            <td>@inflow.TansactionTitle</td>
            <td>@inflow.Date.ToString("yyyy/MM/dd")</td>
            <td>@prefferedCurrency @inflow.Amount</td>
            <td>@inflow.Label</td>
            <td>@inflow.Note</td>
        </tr>
    }
    </tbody>
</table>
</div>

@code {
    private List<Inflow> inflows = new();
    private int currentBalance;
    private string prefferedCurrency;
    private int totalTransactions => inflows.Count;
    private int totalIncome => inflows.Where(i => i.Amount > 0).Sum(i => i.Amount);
    private List<Inflow> filteredInflows = new();
    private string searchQuery;

    protected override async Task OnInitializedAsync()
    {
        // get all inflows from inflow table
        inflows = await DatabaseService.GetAllInflowsAsync();
        filteredInflows = inflows;

        // Fget the current user's balance from user table
        var users = await DatabaseService.GetAllUsersAsync();
        var currentUser = users.FirstOrDefault();
        
        //if there is a user in a database
        if (currentUser != null)
        {
            currentBalance = currentUser.Balance;
            prefferedCurrency = currentUser.prefferedCurrency;
        }
        //if there is no user in database
        else
        {
            currentBalance = 0;
            //Console.WriteLine("No user found in the database.");
        }
    }
    
    private void SearchTransactions()
    {
        if (string.IsNullOrEmpty(searchQuery))
        {
            // If no query is entered, reset the filtered list
            filteredInflows = inflows;
        }
        else
        {
            // Safely check for null TransactionTitle
            filteredInflows = inflows
                .Where(i => i.TansactionTitle != null && i.TansactionTitle.Contains(searchQuery))
                .ToList();
        }
    }

    
    //These method is called when sort button are clicked what they do is sort data in ascending and descending order.
    private void SortByDateAsc()
    {
        filteredInflows = inflows.OrderBy(i => i.Date).ToList();
    }

    private void SortByDateDesc()
    {
        filteredInflows = inflows.OrderByDescending(i => i.Date).ToList();
    }
    private void SortByAmountAsc()
    {
        filteredInflows = inflows.OrderBy(i => i.Amount).ToList();
    }

    private void SortByAmountDesc()
    {
        filteredInflows = inflows.OrderByDescending(i => i.Amount).ToList();
    }

    private void NavigateToAddMoney()
    {
        Navigation.NavigateTo("/addmoney");
    }
}
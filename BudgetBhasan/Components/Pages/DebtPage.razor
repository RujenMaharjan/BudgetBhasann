@page "/debt"
@using BudgetBhasan.Models
@using BudgetBhasan.Services

@inject Database DatabaseService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<link href="css/Debt.css" rel="stylesheet" />

<div class="debt-container">
    <h2>Debt</h2>
    <div class="summary-cards">
        <div class="card">
            <h3>Current Balance</h3>
            <p>@prefferedCurrency @currentBalance</p>
        </div>
        <div class="card">
            <h3>Number of Unpaid Debts</h3>
            <p>@numberOfUnpaidDebts</p>
        </div>
        <div class="card">
            <h3>Your Remaining Debts</h3>
            <p>@prefferedCurrency @totalUnpaidDebt</p>
            <button @onclick="NavigateToAddDebt">Take Debt</button>
        </div>
    </div>

    <h3>Debt Transactions</h3>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }
    @if (debts == null)
    {
        <p>Loading debts...</p>
    }
    else if (!debts.Any())
    {
        <p>No unpaid debts found.</p>
    }
    else
    {
        <table class="transaction-table">
            <thead>
                <tr>
                    <th>Taken From</th>
                    <th>
                        Date Taken 
                        <button @onclick="SortByDateTakenAsc">↑</button>
                        <button @onclick="SortByDateTakenDesc">↓</button>
                    </th>
                    <th>
                        Due Date
                        <button @onclick="SortByDueDateAsc">↑</button>
                        <button @onclick="SortByDueDateDesc">↓</button>
                    </th>
                    <th>
                        Amount
                        <button @onclick="SortByAmountAsc">↑</button>
                        <button @onclick="SortByAmountDesc">↓</button>
                    </th>
                    <th>Repay</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in debts)
                {
                    <tr>
                        <td>@debt.TakenFrom</td>
                        <td>@debt.DateTaken.ToString("yyyy/MM/dd")</td>
                        <td>@debt.DueDate.ToString("yyyy/MM/dd")</td>
                        <td>@prefferedCurrency @debt.Amount</td>
                        <td>
                            <button @onclick="() => ConfirmRepayment(debt)">Repay</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<Debt> debts;
    private int currentBalance;
    private int totalUnpaidDebt;
    private int numberOfUnpaidDebts;
    private string errorMessage;
    private string prefferedCurrency;

    protected override async Task OnInitializedAsync()
    {
        //await LoadUserBalanceAsync();
        await LoadDebtsAsync();
        var users = await DatabaseService.GetAllUsersAsync();
        var currentUser = users.FirstOrDefault();
        if (currentUser != null)
        {
            currentBalance = currentUser.Balance;
            prefferedCurrency = currentUser.prefferedCurrency;
        }
        //if there is no user in database Current Balance is defaulted to 0.
        else
        {
            currentBalance = 0;
            //Console.WriteLine("No user found in the database.");
        }
    }

    
    //This method brings rows from debt table where isPaid is "False".
    private async Task LoadDebtsAsync()
    {
        try
        {
            var allDebts = await DatabaseService.GetAllDebtsAsync();
            debts = allDebts.Where(d => d.IsPaid == "False").ToList();
            totalUnpaidDebt = debts.Sum(d => d.Amount);
            numberOfUnpaidDebts = debts.Count;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading debts: {ex.Message}");
            debts = new List<Debt>();
            totalUnpaidDebt = 0;
            numberOfUnpaidDebts = 0;
        }
    }
    
    //This method is called when repay button is clicked. This method asks user confirmation if user really wants to clear their debt.
    private async Task ConfirmRepayment(Debt debt)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to repay Rs {debt.Amount}?");
        if (isConfirmed)
        {
            await HandleRepayment(debt);
        }
    }
    
    //This method is called when user clicks ok in the confirmation message.
    private async Task HandleRepayment(Debt debt)
    {
        //Firstly balance is checked if debt repayment can be done.
        if (currentBalance >= debt.Amount)
        {
            try
            {
                currentBalance -= debt.Amount;
                
                //After user balance is deducted it is updated in User table and isPaid is changed to true.
                var users = await DatabaseService.GetAllUsersAsync();
                var currentUser = users.FirstOrDefault();
                if (currentUser != null)
                {
                    currentUser.Balance = currentBalance;
                    await DatabaseService.UpdateUserAsync(currentUser);
                }

                var debtToUpdate = await DatabaseService.GetDebtByIdAsync(debt.debtId);
                if (debtToUpdate != null)
                {
                    debtToUpdate.IsPaid = "true";
                    await DatabaseService.UpdateDebtAsync(debtToUpdate);
                }

                await LoadDebtsAsync();
                errorMessage = string.Empty;
            }
            catch (Exception ex)
            {
                //Console.WriteLine($"Error handling repayment: {ex.Message}");
                errorMessage = "An error occurred while processing your repayment.";
            }
        }
        else
        {
            errorMessage = "Not enough money to repay this debt.";
        }
    }

    private void NavigateToAddDebt()
    {
        NavigationManager.NavigateTo("/adddebt");
    }

    private void SortByDateTakenAsc()
    {
        debts = debts.OrderBy(d => d.DateTaken).ToList();
    }

    private void SortByDateTakenDesc()
    {
        debts = debts.OrderByDescending(d => d.DateTaken).ToList();
    }

    private void SortByDueDateAsc()
    {
        debts = debts.OrderBy(d => d.DueDate).ToList();
    }

    private void SortByDueDateDesc()
    {
        debts = debts.OrderByDescending(d => d.DueDate).ToList();
    }

    private void SortByAmountAsc()
    {
        debts = debts.OrderBy(d => d.Amount).ToList();
    }

    private void SortByAmountDesc()
    {
        debts = debts.OrderByDescending(d => d.Amount).ToList();
    }
}

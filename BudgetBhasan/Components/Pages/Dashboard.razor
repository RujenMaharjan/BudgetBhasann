@page "/dashboard"
@using MudBlazor
@using BudgetBhasan.Services
@using BudgetBhasan.Models
@inject Database DatabaseService
@inject NavigationManager NavigationManager


<div class="d-flex justify-end mb-4">
    <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudButton Color="Color.Primary" Variant="Variant.Text">
                Hi, @currentUser?.Username
            </MudButton>
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem OnClick="Logout">Logout</MudMenuItem>
        </ChildContent>
    </MudMenu>
</div>

<div class="d-flex justify-space-between mb-4">
    <MudCard Class="pa-4 ma-2" Style="width: 45%;">
        <MudCardContent>
            <h4>Total Transactions</h4>
            <MudText Typo="Typo.h5">@totalTransactionCount</MudText>
        </MudCardContent>
    </MudCard>
    <MudCard Class="pa-4 ma-2" Style="width: 45%;">
        <MudCardContent>
            <h4>Total Transaction Amount</h4>
            <MudText Typo="Typo.h5">@prefferedCurrency @totalTransactionAmount</MudText>
        </MudCardContent>
    </MudCard>
</div>

<MudPaper Class="pa-4 mb-4">
    <MudDateRangePicker @bind-DateRange="dateRange" 
                        Label="Filter by Date Range" 
                        Class="mb-4"/>
    <MudButton Variant="Variant.Filled" 
               Color="Color.Primary" 
               OnClick="ApplyDateFilter" 
               Class="mb-4 ml-4">Apply Filter</MudButton>
</MudPaper>

<MudPaper Class="pa-4 mb-4">
    <MudChart ChartType="ChartType.Bar" 
              ChartSeries="@outflowSeries" 
              XAxisLabels="@topOutflowsLabels" 
              Width="100%" 
              Height="350px" />
    <h3>Top 5 Outflows</h3>
</MudPaper>

<MudPaper Class="pa-4">
    <MudChart ChartType="ChartType.Pie"
              ChartSeries="@inflowSeries"
              LegendPosition="Position.Right"
              InputLabels="@inflowLabels"
              InputData="@inflowData"
              Width="100%" 
              Height="350px" />
    <h3>Top 5 Inflows</h3>
</MudPaper>

<MudPaper Class="pa-4 mt-4">
    <MudChart ChartType="ChartType.Bar"
              ChartSeries="@debtSeries"
              XAxisLabels="@topDebtLabels"
              Width="100%"
              Height="350px" />
    <h3>Top 5 Debts</h3>
</MudPaper>

@code {
    private DateRange dateRange = new DateRange(null, null);
    private string[] topOutflowsLabels = new[] { "Loading..." };
    private string[] inflowLabels = Array.Empty<string>();
    private double[] inflowData = Array.Empty<double>();
    private string[] topDebtLabels = new[] { "Loading..." };
    private List<ChartSeries> outflowSeries = new();
    private List<ChartSeries> inflowSeries = new();
    private List<ChartSeries> debtSeries = new();
    private User currentUser;
    private int totalTransactionCount;
    private double totalTransactionAmount;
    private string prefferedCurrency;

    // Stores data of inflow, outflow and debt table in a list.
    private List<Outflow> allOutflows = new();
    private List<Inflow> allInflows = new();
    private List<Debt> allDebts = new();
    
    
    //This method is used to send values to card on top of the page.
    private void UpdateSummary()
    {
        totalTransactionCount = allOutflows.Count + allInflows.Count + allDebts.Count;
        totalTransactionAmount = allOutflows.Sum(o => o.Amount) 
                                 + allInflows.Sum(i => i.Amount) 
                                 + allDebts.Sum(d => d.Amount);
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        currentUser = await DatabaseService.GetUserAsync();
        await LoadAllData();
        await UpdateCharts();
        UpdateSummary();
        if (currentUser != null)
        {
            //This fetches preffered currency of user.
            prefferedCurrency = currentUser.prefferedCurrency;
        }
    }
    
    //This method is for logout.
    private void Logout()
    {
        NavigationManager.NavigateTo("/login", true);  
    }
    
    //This method fetches data from Tables.
    private async Task LoadAllData()
    {
        allOutflows = await DatabaseService.GetAllOutflowsAsync();
        allInflows = await DatabaseService.GetAllInflowsAsync();
        allDebts = await DatabaseService.GetAllDebtsAsync();
    }
    
    //This method is called when datwe filter is applied
    private async Task ApplyDateFilter()
    {
        await UpdateCharts();
    }
    
    //This method is used to update charts according to date filter provided by user.
    private async Task UpdateCharts()
    {
        var filteredOutflows = FilterDataByDateRange(allOutflows);
        var filteredInflows = FilterDataByDateRange(allInflows);
        var filteredDebts = FilterDataByDateRange(allDebts);

        await UpdateOutflowChart(filteredOutflows);
        await UpdateInflowChart(filteredInflows);
        await UpdateDebtChart(filteredDebts);

        StateHasChanged();
    }
    
    /*This method filters a list of items based on a given date range.
    It extracts the relevant date property from each item using pattern matching 
    and includes only those items whose dates fall within the specified range*/
    private List<T> FilterDataByDateRange<T>(List<T> data) where T : class
    {
        if (!dateRange.Start.HasValue || !dateRange.End.HasValue)
            return data;
        
        
        var startDate = dateRange.Start.Value.Date;
        var endDate = dateRange.End.Value.Date;

        return data.Where(item =>
        {
            DateTime itemDate = item switch
            {
                Outflow o => o.Date,
                Inflow i => i.Date,
                Debt d => d.DateTaken,  
                _ => DateTime.MinValue
            };
            return itemDate >= startDate && itemDate <= endDate;
        }).ToList();
    }
    
    //This method provides list of top 5 outflows with filtered date if user has applied date filter.
    private async Task UpdateOutflowChart(List<Outflow> filteredOutflows)
    {
        var topOutflows = filteredOutflows
            .OrderByDescending(o => o.Amount)
            .Take(5)
            .ToList();

        topOutflowsLabels = topOutflows
            .Select(o => o.TansactionLabel ?? "Unnamed")
            .ToArray();

        var chartData = topOutflows
            .Select(o => (double)o.Amount)
            .ToArray();

        outflowSeries = new List<ChartSeries>
        {
            new ChartSeries 
            { 
                Name = "Outflows", 
                Data = chartData
            }
        };
    }
    
    //This method provides list of top 5 inflows with filtered date if user has applied date filter.
    private async Task UpdateInflowChart(List<Inflow> filteredInflows)
    {
        var groupedInflows = filteredInflows
            .GroupBy(i => i.TansactionTitle ?? "Unnamed")
            .Select(g => new
            {
                Label = g.Key,
                TotalAmount = g.Sum(i => i.Amount)
            })
            .OrderByDescending(g => g.TotalAmount)
            .Take(5)
            .ToList();

        inflowLabels = groupedInflows.Select(g => g.Label).ToArray();
        inflowData = groupedInflows.Select(g => (double)g.TotalAmount).ToArray();
    }
    
    //This method provides list of top 5 debts with filtered date if user has applied date filter.
    private async Task UpdateDebtChart(List<Debt> filteredDebts)
    {
        var topDebts = filteredDebts
            .OrderByDescending(d => d.Amount)
            .Take(5)
            .ToList();

        topDebtLabels = topDebts
            .Select(d => d.TakenFrom ?? "Unknown")
            .ToArray();

        var chartData = topDebts
            .Select(d => (double)d.Amount)
            .ToArray();

        debtSeries = new List<ChartSeries>
        {
            new ChartSeries 
            { 
                Name = "Debts", 
                Data = chartData
            }
        };
    }
}